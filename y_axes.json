[{"id":"98f258f4.cde958","type":"tab","label":"y axes","disabled":false,"info":""},{"id":"4e9c9fcb.9d950c","type":"ui_gauge","z":"98f258f4.cde958","name":"","group":"c47a3abb.40f578","order":1,"width":"0","height":"0","gtype":"gage","title":"Melt Temperature","label":"Â°F","format":"{{value|number:2}}","min":0,"max":"1000","colors":["#00b500","#e6e600","#ca3838"],"seg1":"700","seg2":"900","x":690,"y":500,"wires":[]},{"id":"e36eb337.0487e","type":"ui_chart","z":"98f258f4.cde958","name":"","group":"c47a3abb.40f578","order":1,"width":0,"height":0,"label":"Melt Temperature","chartType":"line","legend":"false","xformat":"auto","interpolate":"linear","nodata":"awaiting data...","dot":false,"ymin":"0","ymax":"1000","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":true,"outputs":1,"x":690,"y":430,"wires":[["9b3c5295.1039"]]},{"id":"ca301335.64d07","type":"ui_text_input","z":"98f258f4.cde958","name":"","label":"Ymax","tooltip":"","group":"c47a3abb.40f578","order":2,"width":0,"height":0,"passthru":true,"mode":"number","delay":300,"topic":"ymax","x":210,"y":320,"wires":[["eda56ab5.650998"]]},{"id":"f0696853.026f08","type":"ui_text_input","z":"98f258f4.cde958","name":"","label":"Ymin","tooltip":"","group":"c47a3abb.40f578","order":3,"width":0,"height":0,"passthru":true,"mode":"number","delay":300,"topic":"ymin","x":210,"y":280,"wires":[["eda56ab5.650998"]]},{"id":"35ede489.841fdc","type":"inject","z":"98f258f4.cde958","name":"","repeat":"","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"str","x":180,"y":470,"wires":[["1f27bbca.d53288"]]},{"id":"1f27bbca.d53288","type":"random","z":"98f258f4.cde958","name":"random between 1 - 500","low":"1","high":"500","inte":"false","property":"payload","x":370,"y":470,"wires":[["e36eb337.0487e","4e9c9fcb.9d950c","d7c7b52f.e79ed8"]]},{"id":"523af6ba.d85844","type":"function","z":"98f258f4.cde958","name":"Format chart","func":"\nvar x = flow.get('chartprops').xaxis.min; //time back in milliseconds\nvar d = new Date().getTime() - x //current time in milliseconds - desired time\n//console.log(new Date(2020,02,11,16,30).toString());\ndelete msg.payload;\ndelete msg.topic;\n\n//send all modification in one go\nmsg.ui_control = { \n    options: {\n        scales: {\n            xAxes: [{type: 'time',time: {min: d}}],\n            yAxes: [{ticks: {suggestedMin: flow.get('chartprops').yaxis.min, suggestedMax: flow.get('chartprops').yaxis.max}}]\n        }\n    }\n}\nreturn msg; \n\n","outputs":1,"noerr":2,"x":470,"y":410,"wires":[["e36eb337.0487e"]]},{"id":"ba6e9949.c6dbd8","type":"ui_text_input","z":"98f258f4.cde958","name":"","label":"Minutes","tooltip":"","group":"c47a3abb.40f578","order":3,"width":0,"height":0,"passthru":true,"mode":"number","delay":300,"topic":"time","x":200,"y":240,"wires":[["eda56ab5.650998"]]},{"id":"eda56ab5.650998","type":"function","z":"98f258f4.cde958","name":"Store chart options","func":"var chartprops = flow.get('chartprops')\nswitch(msg.topic){\n    case 'time':{\n        chartprops.xaxis.min = msg.payload * 60000\n        break\n    }\n    case 'ymin':{\n        chartprops.yaxis.min = msg.payload\n        break\n    }\n    case 'ymax':{\n        chartprops.yaxis.max = msg.payload\n        break\n    }\n}\n\n//flow.set('chartprops',chartprops)\n// message continues to flow but in next node properties will be deleted\n// it will be used only as change event\nreturn msg;\n","outputs":1,"noerr":2,"x":410,"y":280,"wires":[["523af6ba.d85844"]]},{"id":"c954d23e.33fd6","type":"inject","z":"98f258f4.cde958","name":"Resend chart format","repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":200,"y":410,"wires":[["523af6ba.d85844"]]},{"id":"2d012822.275f2","type":"comment","z":"98f258f4.cde958","name":"Resend - read comments !","info":"If minimum time is sent to chart, it will be absolute\nChart does not take it as time frame\nSo if change is in minutes, it is reasonable enough\nto send new min value to chart in every minute\nto hold time frame constant","x":210,"y":370,"wires":[]},{"id":"d7c7b52f.e79ed8","type":"debug","z":"98f258f4.cde958","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":670,"y":560,"wires":[]},{"id":"9b3c5295.1039","type":"debug","z":"98f258f4.cde958","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":980,"y":450,"wires":[]},{"id":"d0c47691.cb6c4","type":"inject","z":"98f258f4.cde958","name":"","repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":250,"y":150,"wires":[["44753f73.737494"]]},{"id":"44753f73.737494","type":"function","z":"98f258f4.cde958","name":"init chart options in flow","func":"var chartprops = flow.get('chartprops') || {}\n// set same values as in chart configuration\nchartprops.xaxis = {min:3600000}//time frame\nchartprops.yaxis = {min:0,max:1000}//vertical axis limits\nflow.set('chartprops',chartprops)\n","outputs":1,"noerr":2,"x":470,"y":150,"wires":[[]]},{"id":"c47a3abb.40f578","type":"ui_group","name":"Group 1","tab":"bea530fd.1b542","order":1,"disp":true,"width":6},{"id":"bea530fd.1b542","type":"ui_tab","z":"","name":"y axes","icon":"dashboard","order":4,"disabled":false,"hidden":false}]